//@version=5
strategy(title='VK HullMA Strategy', overlay=true, pyramiding=0, default_qty_type=strategy.percent_of_equity, default_qty_value=10, calc_on_every_tick=false)

// === INPUTS ===
res    = input.timeframe(title='TIMEFRAME', defval='1', group="NON REPAINT")
useRes = input(defval=true, title='Use Alternate Signals')
intRes = input(defval=4, title='Multiplier for Alternate Signals')
stratRes = timeframe.ismonthly ? str.tostring(timeframe.multiplier * intRes, '###M') : timeframe.isweekly ? str.tostring(timeframe.multiplier * intRes, '###W') : timeframe.isdaily ? str.tostring(timeframe.multiplier * intRes, '###D') : timeframe.isintraday ? str.tostring(timeframe.multiplier * intRes, '####') : '60'
basisLen = input.int(defval=2, title='HullMA Period', minval=1)
delayOffset = input.int(defval=0, title='Delay Open/Close MA (Forces Non-Repainting)', minval=0, step=1)

/// Inputs for enabling/disabling alerts
enableBuyAlert = input(defval=true, title='buy')
buyAlertMessage = input(defval='buy', title='Buy Alert Message')

enableSellAlert = input(defval=true, title='sell')
sellAlertMessage = input(defval='sell', title='Sell Alert Message')

enableTargetAlert = input(defval=true, title='target')
targetAlertMessage = input(defval='Exit', title='Target Alert Message')

enableStopLossAlert = input(defval=true, title='Stoploss')
stopLossAlertMessage = input(defval='Exit', title='Stop Loss Alert Message')

enableTarget = input(defval=true, title='Enable Target')
targetPoints = input.int(defval=6, title='Target Points', minval=1)

enableStopLoss = input(defval=true, title='Enable Stop Loss')
stopLossPoints = input.int(defval=2, title='Stop Loss Points', minval=1)

// Main Indicator
// Functions
smoothrng(x, t, m) =>
    wper = t * 2 - 1
    avrng = ta.ema(math.abs(x - x[1]), t)
    smoothrng = ta.ema(avrng, wper) * m
rngfilt(x, r) =>
    rngfilt = x
    rngfilt := x > nz(rngfilt[1]) ? x - r < nz(rngfilt[1]) ? nz(rngfilt[1]) : x - r : x + r > nz(rngfilt[1]) ? nz(rngfilt[1]) : x + r
percWidth(len, perc) => (ta.highest(len) - ta.lowest(len)) * perc / 100
securityNoRep(sym, res, src) => request.security(sym, res, src, barmerge.gaps_off, barmerge.lookahead_on)
swingPoints(prd) =>
    pivHi = ta.pivothigh(prd, prd)
    pivLo = ta.pivotlow (prd, prd)
    last_pivHi = ta.valuewhen(pivHi, pivHi, 1)
    last_pivLo = ta.valuewhen(pivLo, pivLo, 1)
    hh = pivHi and pivHi > last_pivHi ? pivHi : na
    lh = pivHi and pivHi < last_pivHi ? pivHi : na
    hl = pivLo and pivLo > last_pivLo ? pivLo : na
    ll = pivLo and pivLo < last_pivLo ? pivLo : na
    [hh, lh, hl, ll]
f_chartTfInMinutes() =>
    float _resInMinutes = timeframe.multiplier * (
      timeframe.isseconds ? 1                   :
      timeframe.isminutes ? 1.                  :
      timeframe.isdaily   ? 60. * 24            :
      timeframe.isweekly  ? 60. * 24 * 7        :
      timeframe.ismonthly ? 60. * 24 * 30.4375  : na)
f_kc(src, len, sensitivity) =>
    basis = ta.sma(src, len)
    span  = ta.atr(len)
    [basis + span * sensitivity, basis - span * sensitivity]
wavetrend(src, chlLen, avgLen) =>
    esa = ta.ema(src, chlLen)
    d = ta.ema(math.abs(src - esa), chlLen)
    ci = (src - esa) / (0.015 * d)
    wt1 = ta.ema(ci, avgLen)
    wt2 = ta.sma(wt1, 3)
    [wt1, wt2]
f_top_fractal(src) => src[4] < src[2] and src[3] < src[2] and src[2] > src[1] and src[2] > src[0]
f_bot_fractal(src) => src[4] > src[2] and src[3] > src[2] and src[2] < src[1] and src[2] < src[0]
f_fractalize (src) => f_top_fractal(src) > 0 ? 1 : f_bot_fractal(src) < 0 ? -1 : 0
f_findDivs(src, topLimit, botLimit) =>
    fractalTop = f_fractalize(src) > 0 and src[2] >= topLimit ? src[2] : na
    fractalBot = f_fractalize(src) < 0 and src[2] <= botLimit ? src[2] : na
    highPrev = ta.valuewhen(fractalTop, src[2], 0)[2]
    highPrice = ta.valuewhen(fractalTop, high[2], 0)[2]
    lowPrev = ta.valuewhen(fractalBot, src[2], 0)[2]
    lowPrice = ta.valuewhen(fractalBot, low[2], 0)[2]
    bearSignal = fractalTop and high[1] > highPrice and src[1] < highPrev
    bullSignal = fractalBot and low[1] < lowPrice and src[1] > lowPrev
    [bearSignal, bullSignal]
 
// === BASE FUNCTIONS ===
// HullMA
hullma(src, length) =>
    wma1 = ta.wma(src, length / 2)
    wma2 = ta.wma(src, length)
    hma = ta.wma(2 * wma1 - wma2, math.round(math.sqrt(length)))
    hma

// security wrapper for repeat calls
reso(exp, use, res) =>
    security_1 = request.security(syminfo.tickerid, res, exp, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
    use ? security_1 : exp

// === /BASE FUNCTIONS ===
// === SERIES SETUP ===
closeSeries = hullma(close[delayOffset], basisLen)
openSeries = hullma(open[delayOffset], basisLen)
// === /SERIES ===

// Get Alternate resolution Series if selected.
closeSeriesAlt = reso(closeSeries, useRes, stratRes)
openSeriesAlt = reso(openSeries, useRes, stratRes)

// === ALERT conditions
xlong = ta.crossover(closeSeriesAlt, openSeriesAlt)
xshort = ta.crossunder(closeSeriesAlt, openSeriesAlt)
longCond = xlong and closeSeriesAlt > openSeriesAlt
shortCond = xshort and closeSeriesAlt < openSeriesAlt

// Calculate the target prices
longTP = close + targetPoints
shortTP = close - targetPoints

// Calculate the stop-loss prices
longSL = close - stopLossPoints
shortSL = close + stopLossPoints

// Alert conditions
if (enableBuyAlert and longCond)
    alert(buyAlertMessage)
if (enableSellAlert and shortCond)
    alert(sellAlertMessage)
if (enableTargetAlert and longCond and enableTarget)
    alert(targetAlertMessage)
if (enableStopLossAlert and shortCond and enableStopLoss)
    alert(stopLossAlertMessage)

// Strategy orders
if (longCond)
    strategy.entry('Long', strategy.long)
    if (enableTarget)
        strategy.exit('Take Profit', from_entry='Long', limit=longTP)
    if (enableStopLoss)
        strategy.exit('Stop Loss', from_entry='Long', stop=longSL)

if (shortCond)
    strategy.entry('Short', strategy.short)
    if (enableTarget)
        strategy.exit('Take Profit', from_entry='Short', limit=shortTP)
    if (enableStopLoss)
        strategy.exit('Stop Loss', from_entry='Short', stop=shortSL)
